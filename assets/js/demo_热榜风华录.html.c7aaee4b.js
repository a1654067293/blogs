"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[5584],{3462:(s,n)=>{n.A=(s,n)=>{const i=s.__vccOpts||s;for(const[s,e]of n)i[s]=e;return i}},2070:(s,n,i)=>{i.r(n),i.d(n,{comp:()=>p,data:()=>l});var e=i(3034);const a=[(0,e.Fv)('<p><strong>项目复盘</strong></p><p><strong>1.1 介绍</strong></p><p><strong>项目名</strong>：热榜风华录</p><p><strong>开发时间</strong>：（一个月）</p><p><strong>使用的（前端）技术栈</strong>：vue3框架、vite打包工具、CSS预处理器sass、elementPlusUI组件库、vueRouter。npm包管理器、ESLint和Prettier格式化代码。</p><p><strong>1.2 项目亮点</strong></p><p><strong>1.2.1 懒加载。</strong></p><p>使用IntersectionObserver API来检测组件是否进入视口。当组件进入视口时，设置isVisible为true</p><p><strong>1.2.2 适配问题。</strong></p><p>通过媒体查询，设置在不同设备上有不同的效果显示。</p><p><strong>1.2.3 黑夜模式切换。</strong></p><p>可以通过定义一个响应式变量isNightMode</p><p>创建一个方法toggleMode来切换这个变量的值，实现黑夜模式和白天模式的切换。</p><p>通过:class指令动态应用不同的样式类，当isNightMode为true时，页面应用黑夜模式样式，否则应用白天模式样式</p><p><strong>1.3 打包上线</strong></p><p><strong>1.3.1 vite打包配置文件</strong></p><p>规范配置，将不同类型的文件组织到不同的目录，简单压缩代码，去除了console语句</p><p><strong>1.4 运维Nginx</strong></p><p><strong>1.4.1 学会使用。</strong></p><p>安装、配置文件</p><p><strong>1.4.2 nginx.config配置文件理解。</strong></p><p>http模块</p><p>server：</p><p>1、listen：nginx监听的端口</p><p>1、server_name：nginx服务的ip地址或者域名</p><p>3、location：配置路由访问信息</p><p><strong>1.4.3 怎么做限流</strong></p><p>在 Nginx 配置中使用的限流是漏桶算法（Leaky Bucket Algorithm）的实现。漏桶算法是一种网络流量整形（Traffic Shaping）技术，用于控制数据的传输速率，防止网络拥塞。</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#$binary_remote_addr 是 Nginx 内置变量，代表客户端 IP 地址的二进制形式。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#zone=my_limit:10m 定义了共享内存区域的名称 my_limit 和大小 10m（10 兆字节）。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#rate=1r/s 定义了请求的速率，这里是每秒一个请求。</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    limit_req_zone </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">binary_remote_addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zone=my_limit:10m rate=1r/s;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    listen </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        limit_req </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">zone=my_limit burst=5 nodelay;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://127.0.0.1:8080/;  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 示例代理配置</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#burst 参数定义了突发请求的数量，这里是 5。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#nodelay 参数用于在请求数超过限制时立即返回错误响应而不是排队等待。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>1.4.4 nginx命令（优雅）</strong></p><p>（Windows 系统）</p><p>service nginx start # 在使用 System V init 的系统中</p><p>systemctl start nginx # 在使用 systemd 的系统中</p><p><strong>优雅重启</strong></p><p>nginx -s HUP</p><p><strong>优雅停止</strong></p><p>nginx -s QUIT</p><p>（ Ubuntu 系统）</p><p>安装nginx</p><p>sudo apt install nginxs</p><p>sudo systemctl start nginx</p><p>sudo systemctl stop nginx</p><p>sudo systemctl restart nginx</p><p><strong>1.5 优化</strong></p><p><strong>1.5.1 产品优化</strong></p><ol><li>HTML优化：压缩HTML代码、删除注释（使用插件）、使用语义化标签、削减DOM数量和层级数量，坚持 DOM 元素简洁和扁平化的层级、减少重排重绘。</li><li>JavaScript优化：减少DOM访问、节流与防抖</li><li>css优化：尽量少用@import、.避免！important，可以选择其他选择器、CSS文件压缩</li><li>图片优化：采用svg图片或者字体图标、</li><li>webpack/vite构建优化：多线程、缓存加载、热更新、缩小css代码、缩小js代码、删除无用代码、使用 webpack-bundle-analyzer 来查看打包后的 bundle 文件的体积、Gzip压缩、nginx也要开启、对于一些小图片，可以转成base64编码、将同类型文件打包在相同文件夹下。</li></ol><p><strong>1.5.2 Gzip压缩</strong></p><p>Nginx服务器只需要配置：</p><p>// 静态加载本地的gz文件，需要在nginx上安装http_gzip_static_module模块</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// nginx配置</span></span>\n<span class="line"><span>gzip on;</span></span>\n<span class="line"><span>gzip_static on;</span></span>\n<span class="line"><span>gzip_comp_level 4;</span></span>\n<span class="line"><span>gzip_types text/plain text/html text/css application/x-javascript text/xml application/xml application/xml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在webpack中可以使用compression-webpack-plugin来实现</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const CompressionPlugin = require(&#39;compression-webpack-plugin&#39;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>module.exports = {</span></span>\n<span class="line"><span>  // ...其他配置</span></span>\n<span class="line"><span>  plugins: [</span></span>\n<span class="line"><span>    new CompressionPlugin({</span></span>\n<span class="line"><span>      // 匹配需要进行Gzip压缩的文件类型</span></span>\n<span class="line"><span>      test: /\\.(js|css|html|svg)$/,</span></span>\n<span class="line"><span>      // 只有文件大小大于等于该值时才会生成Gzip文件</span></span>\n<span class="line"><span>      threshold: 10240,</span></span>\n<span class="line"><span>    }),</span></span>\n<span class="line"><span>  ],</span></span>\n<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在vite中使用vite-plugin-compression来实现</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import compressPlugin from &#39;vite-plugin-compression&#39;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>export default defineConfig({</span></span>\n<span class="line"><span>  plugins: [</span></span>\n<span class="line"><span>    compressPlugin({</span></span>\n<span class="line"><span>      ext: &#39;.gz&#39;,</span></span>\n<span class="line"><span>      algorithm: &#39;gzip&#39;,</span></span>\n<span class="line"><span>      deleteOriginFile: false,</span></span>\n<span class="line"><span>    }),</span></span>\n<span class="line"><span>  ],</span></span>\n<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>1.5.3 CDN加速</strong></p><p>CDN（content delivery network）即内容分发网络，通过在各个地方部署 CDN 镜像服务器，并复制源服务器的应用内容，让用户可以从最合适的镜像服务器中获取资源内容。</p><p>使用组件的cdn、vue的cdn使得用户访问的时候速度加快。</p>',57)],t={},p=(0,i(3462).A)(t,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,a)}]]),l=JSON.parse('{"path":"/demo/%E7%83%AD%E6%A6%9C%E9%A3%8E%E5%8D%8E%E5%BD%95.html","title":"热榜风华录","lang":"zh-CN","frontmatter":{"title":"热榜风华录","icon":"object-group","order":2,"category":["作品"],"tag":["Vue3","Vite","打包上线","Node.js","Element Plus","Axios"],"description":"项目复盘 1.1 介绍 项目名：热榜风华录 开发时间：（一个月） 使用的（前端）技术栈：vue3框架、vite打包工具、CSS预处理器sass、elementPlusUI组件库、vueRouter。npm包管理器、ESLint和Prettier格式化代码。 1.2 项目亮点 1.2.1 懒加载。 使用IntersectionObserver API来检...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/demo/%E7%83%AD%E6%A6%9C%E9%A3%8E%E5%8D%8E%E5%BD%95.html"}],["meta",{"property":"og:site_name","content":"Cang Ran"}],["meta",{"property":"og:title","content":"热榜风华录"}],["meta",{"property":"og:description","content":"项目复盘 1.1 介绍 项目名：热榜风华录 开发时间：（一个月） 使用的（前端）技术栈：vue3框架、vite打包工具、CSS预处理器sass、elementPlusUI组件库、vueRouter。npm包管理器、ESLint和Prettier格式化代码。 1.2 项目亮点 1.2.1 懒加载。 使用IntersectionObserver API来检..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Cang Ran"}],["meta",{"property":"article:tag","content":"Vue3"}],["meta",{"property":"article:tag","content":"Vite"}],["meta",{"property":"article:tag","content":"打包上线"}],["meta",{"property":"article:tag","content":"Node.js"}],["meta",{"property":"article:tag","content":"Element Plus"}],["meta",{"property":"article:tag","content":"Axios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"热榜风华录\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cang Ran\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.54,"words":1063},"filePathRelative":"demo/热榜风华录.md","excerpt":"<p><strong>项目复盘</strong></p>\\n<p><strong>1.1 介绍</strong></p>\\n<p><strong>项目名</strong>：热榜风华录</p>\\n<p><strong>开发时间</strong>：（一个月）</p>\\n<p><strong>使用的（前端）技术栈</strong>：vue3框架、vite打包工具、CSS预处理器sass、elementPlusUI组件库、vueRouter。npm包管理器、ESLint和Prettier格式化代码。</p>\\n<p><strong>1.2 项目亮点</strong></p>\\n<p><strong>1.2.1 懒加载。</strong></p>","autoDesc":true}')}}]);